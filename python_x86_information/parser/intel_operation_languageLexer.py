# Generated from intel_operation_language.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,54,368,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,
        1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
        1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,
        1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
        1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,
        1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
        1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,
        1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,
        1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,50,1,50,1,50,5,50,286,8,50,10,50,12,50,289,
        9,50,1,51,1,51,3,51,293,8,51,1,52,1,52,1,53,1,53,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,309,8,54,1,55,1,55,1,55,
        1,55,1,55,1,56,1,56,1,56,4,56,319,8,56,11,56,12,56,320,1,57,1,57,
        5,57,325,8,57,10,57,12,57,328,9,57,1,58,1,58,4,58,332,8,58,11,58,
        12,58,333,1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,62,4,62,344,8,62,
        11,62,12,62,345,1,62,3,62,349,8,62,1,63,1,63,1,63,1,63,5,63,355,
        8,63,10,63,12,63,358,9,63,1,63,1,63,1,64,4,64,363,8,64,11,64,12,
        64,364,1,64,1,64,0,0,65,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,0,105,
        0,107,0,109,0,111,0,113,0,115,0,117,0,119,0,121,0,123,0,125,52,127,
        53,129,54,1,0,9,3,0,65,90,95,95,97,122,1,0,48,57,2,0,66,66,98,98,
        1,0,48,49,2,0,88,88,120,120,1,0,48,55,3,0,48,57,65,70,97,102,2,0,
        10,10,13,13,3,0,9,10,13,13,32,32,367,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
        0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,
        0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,125,1,0,0,0,0,127,
        1,0,0,0,0,129,1,0,0,0,1,131,1,0,0,0,3,133,1,0,0,0,5,135,1,0,0,0,
        7,137,1,0,0,0,9,139,1,0,0,0,11,141,1,0,0,0,13,143,1,0,0,0,15,145,
        1,0,0,0,17,147,1,0,0,0,19,149,1,0,0,0,21,151,1,0,0,0,23,154,1,0,
        0,0,25,156,1,0,0,0,27,159,1,0,0,0,29,161,1,0,0,0,31,164,1,0,0,0,
        33,166,1,0,0,0,35,169,1,0,0,0,37,171,1,0,0,0,39,173,1,0,0,0,41,175,
        1,0,0,0,43,177,1,0,0,0,45,179,1,0,0,0,47,182,1,0,0,0,49,185,1,0,
        0,0,51,187,1,0,0,0,53,191,1,0,0,0,55,195,1,0,0,0,57,197,1,0,0,0,
        59,199,1,0,0,0,61,201,1,0,0,0,63,204,1,0,0,0,65,206,1,0,0,0,67,209,
        1,0,0,0,69,212,1,0,0,0,71,215,1,0,0,0,73,218,1,0,0,0,75,221,1,0,
        0,0,77,226,1,0,0,0,79,230,1,0,0,0,81,233,1,0,0,0,83,236,1,0,0,0,
        85,243,1,0,0,0,87,246,1,0,0,0,89,252,1,0,0,0,91,255,1,0,0,0,93,260,
        1,0,0,0,95,265,1,0,0,0,97,268,1,0,0,0,99,275,1,0,0,0,101,282,1,0,
        0,0,103,292,1,0,0,0,105,294,1,0,0,0,107,296,1,0,0,0,109,308,1,0,
        0,0,111,310,1,0,0,0,113,315,1,0,0,0,115,322,1,0,0,0,117,329,1,0,
        0,0,119,335,1,0,0,0,121,338,1,0,0,0,123,340,1,0,0,0,125,348,1,0,
        0,0,127,350,1,0,0,0,129,362,1,0,0,0,131,132,5,91,0,0,132,2,1,0,0,
        0,133,134,5,93,0,0,134,4,1,0,0,0,135,136,5,40,0,0,136,6,1,0,0,0,
        137,138,5,41,0,0,138,8,1,0,0,0,139,140,5,123,0,0,140,10,1,0,0,0,
        141,142,5,125,0,0,142,12,1,0,0,0,143,144,5,63,0,0,144,14,1,0,0,0,
        145,146,5,58,0,0,146,16,1,0,0,0,147,148,5,44,0,0,148,18,1,0,0,0,
        149,150,5,46,0,0,150,20,1,0,0,0,151,152,5,58,0,0,152,153,5,61,0,
        0,153,22,1,0,0,0,154,155,5,61,0,0,155,24,1,0,0,0,156,157,5,61,0,
        0,157,158,5,61,0,0,158,26,1,0,0,0,159,160,5,43,0,0,160,28,1,0,0,
        0,161,162,5,43,0,0,162,163,5,43,0,0,163,30,1,0,0,0,164,165,5,45,
        0,0,165,32,1,0,0,0,166,167,5,45,0,0,167,168,5,45,0,0,168,34,1,0,
        0,0,169,170,5,42,0,0,170,36,1,0,0,0,171,172,5,47,0,0,172,38,1,0,
        0,0,173,174,5,37,0,0,174,40,1,0,0,0,175,176,5,38,0,0,176,42,1,0,
        0,0,177,178,5,124,0,0,178,44,1,0,0,0,179,180,5,38,0,0,180,181,5,
        38,0,0,181,46,1,0,0,0,182,183,5,124,0,0,183,184,5,124,0,0,184,48,
        1,0,0,0,185,186,5,94,0,0,186,50,1,0,0,0,187,188,5,88,0,0,188,189,
        5,79,0,0,189,190,5,82,0,0,190,52,1,0,0,0,191,192,5,65,0,0,192,193,
        5,78,0,0,193,194,5,68,0,0,194,54,1,0,0,0,195,196,5,33,0,0,196,56,
        1,0,0,0,197,198,5,126,0,0,198,58,1,0,0,0,199,200,5,60,0,0,200,60,
        1,0,0,0,201,202,5,60,0,0,202,203,5,61,0,0,203,62,1,0,0,0,204,205,
        5,62,0,0,205,64,1,0,0,0,206,207,5,62,0,0,207,208,5,61,0,0,208,66,
        1,0,0,0,209,210,5,60,0,0,210,211,5,60,0,0,211,68,1,0,0,0,212,213,
        5,62,0,0,213,214,5,62,0,0,214,70,1,0,0,0,215,216,5,73,0,0,216,217,
        5,70,0,0,217,72,1,0,0,0,218,219,5,70,0,0,219,220,5,73,0,0,220,74,
        1,0,0,0,221,222,5,69,0,0,222,223,5,76,0,0,223,224,5,83,0,0,224,225,
        5,69,0,0,225,76,1,0,0,0,226,227,5,70,0,0,227,228,5,79,0,0,228,229,
        5,82,0,0,229,78,1,0,0,0,230,231,5,116,0,0,231,232,5,111,0,0,232,
        80,1,0,0,0,233,234,5,84,0,0,234,235,5,79,0,0,235,82,1,0,0,0,236,
        237,5,69,0,0,237,238,5,78,0,0,238,239,5,68,0,0,239,240,5,70,0,0,
        240,241,5,79,0,0,241,242,5,82,0,0,242,84,1,0,0,0,243,244,5,68,0,
        0,244,245,5,79,0,0,245,86,1,0,0,0,246,247,5,87,0,0,247,248,5,72,
        0,0,248,249,5,73,0,0,249,250,5,76,0,0,250,251,5,69,0,0,251,88,1,
        0,0,0,252,253,5,79,0,0,253,254,5,68,0,0,254,90,1,0,0,0,255,256,5,
        67,0,0,256,257,5,65,0,0,257,258,5,83,0,0,258,259,5,69,0,0,259,92,
        1,0,0,0,260,261,5,69,0,0,261,262,5,83,0,0,262,263,5,65,0,0,263,264,
        5,67,0,0,264,94,1,0,0,0,265,266,5,79,0,0,266,267,5,70,0,0,267,96,
        1,0,0,0,268,269,5,68,0,0,269,270,5,69,0,0,270,271,5,70,0,0,271,272,
        5,73,0,0,272,273,5,78,0,0,273,274,5,69,0,0,274,98,1,0,0,0,275,276,
        5,82,0,0,276,277,5,69,0,0,277,278,5,84,0,0,278,279,5,85,0,0,279,
        280,5,82,0,0,280,281,5,78,0,0,281,100,1,0,0,0,282,287,3,103,51,0,
        283,286,3,103,51,0,284,286,3,107,53,0,285,283,1,0,0,0,285,284,1,
        0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,102,1,
        0,0,0,289,287,1,0,0,0,290,293,3,105,52,0,291,293,3,109,54,0,292,
        290,1,0,0,0,292,291,1,0,0,0,293,104,1,0,0,0,294,295,7,0,0,0,295,
        106,1,0,0,0,296,297,7,1,0,0,297,108,1,0,0,0,298,299,5,92,0,0,299,
        300,5,117,0,0,300,301,1,0,0,0,301,309,3,111,55,0,302,303,5,92,0,
        0,303,304,5,85,0,0,304,305,1,0,0,0,305,306,3,111,55,0,306,307,3,
        111,55,0,307,309,1,0,0,0,308,298,1,0,0,0,308,302,1,0,0,0,309,110,
        1,0,0,0,310,311,3,123,61,0,311,312,3,123,61,0,312,313,3,123,61,0,
        313,314,3,123,61,0,314,112,1,0,0,0,315,316,5,48,0,0,316,318,7,2,
        0,0,317,319,7,3,0,0,318,317,1,0,0,0,319,320,1,0,0,0,320,318,1,0,
        0,0,320,321,1,0,0,0,321,114,1,0,0,0,322,326,5,48,0,0,323,325,3,121,
        60,0,324,323,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,
        0,0,327,116,1,0,0,0,328,326,1,0,0,0,329,331,3,119,59,0,330,332,3,
        123,61,0,331,330,1,0,0,0,332,333,1,0,0,0,333,331,1,0,0,0,333,334,
        1,0,0,0,334,118,1,0,0,0,335,336,5,48,0,0,336,337,7,4,0,0,337,120,
        1,0,0,0,338,339,7,5,0,0,339,122,1,0,0,0,340,341,7,6,0,0,341,124,
        1,0,0,0,342,344,7,1,0,0,343,342,1,0,0,0,344,345,1,0,0,0,345,343,
        1,0,0,0,345,346,1,0,0,0,346,349,1,0,0,0,347,349,3,117,58,0,348,343,
        1,0,0,0,348,347,1,0,0,0,349,126,1,0,0,0,350,351,5,47,0,0,351,352,
        5,47,0,0,352,356,1,0,0,0,353,355,8,7,0,0,354,353,1,0,0,0,355,358,
        1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,359,1,0,0,0,358,356,
        1,0,0,0,359,360,6,63,0,0,360,128,1,0,0,0,361,363,7,8,0,0,362,361,
        1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,366,
        1,0,0,0,366,367,6,64,1,0,367,130,1,0,0,0,12,0,285,287,292,308,320,
        326,333,345,348,356,364,2,6,0,0,0,1,0
    ]

class intel_operation_languageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    LeftParen = 3
    RightParen = 4
    CurlyLeft = 5
    CurlyRight = 6
    Question = 7
    Colon = 8
    Comma = 9
    Dot = 10
    Assign = 11
    Equal = 12
    EqualEqual = 13
    Plus = 14
    PlusPlus = 15
    Minus = 16
    MinusMinus = 17
    Star = 18
    Div = 19
    Mod = 20
    And = 21
    Or = 22
    AndAnd = 23
    OrOr = 24
    Caret = 25
    XOR = 26
    AND = 27
    Not = 28
    Tilde = 29
    Less = 30
    LessEqual = 31
    Greater = 32
    GreaterEqual = 33
    LeftShift = 34
    RightShift = 35
    IF = 36
    FI = 37
    ELSE = 38
    FOR = 39
    TO = 40
    TO2 = 41
    ENDFOR = 42
    DO = 43
    WHILE = 44
    OD = 45
    CASE = 46
    ESAC = 47
    OF = 48
    DEFINE = 49
    RETURN = 50
    NAME = 51
    INT = 52
    LineComment = 53
    WS = 54

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'['", "']'", "'('", "')'", "'{'", "'}'", "'?'", "':'", "','", 
            "'.'", "':='", "'='", "'=='", "'+'", "'++'", "'-'", "'--'", 
            "'*'", "'/'", "'%'", "'&'", "'|'", "'&&'", "'||'", "'^'", "'XOR'", 
            "'AND'", "'!'", "'~'", "'<'", "'<='", "'>'", "'>='", "'<<'", 
            "'>>'", "'IF'", "'FI'", "'ELSE'", "'FOR'", "'to'", "'TO'", "'ENDFOR'", 
            "'DO'", "'WHILE'", "'OD'", "'CASE'", "'ESAC'", "'OF'", "'DEFINE'", 
            "'RETURN'" ]

    symbolicNames = [ "<INVALID>",
            "LeftParen", "RightParen", "CurlyLeft", "CurlyRight", "Question", 
            "Colon", "Comma", "Dot", "Assign", "Equal", "EqualEqual", "Plus", 
            "PlusPlus", "Minus", "MinusMinus", "Star", "Div", "Mod", "And", 
            "Or", "AndAnd", "OrOr", "Caret", "XOR", "AND", "Not", "Tilde", 
            "Less", "LessEqual", "Greater", "GreaterEqual", "LeftShift", 
            "RightShift", "IF", "FI", "ELSE", "FOR", "TO", "TO2", "ENDFOR", 
            "DO", "WHILE", "OD", "CASE", "ESAC", "OF", "DEFINE", "RETURN", 
            "NAME", "INT", "LineComment", "WS" ]

    ruleNames = [ "T__0", "T__1", "LeftParen", "RightParen", "CurlyLeft", 
                  "CurlyRight", "Question", "Colon", "Comma", "Dot", "Assign", 
                  "Equal", "EqualEqual", "Plus", "PlusPlus", "Minus", "MinusMinus", 
                  "Star", "Div", "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", 
                  "XOR", "AND", "Not", "Tilde", "Less", "LessEqual", "Greater", 
                  "GreaterEqual", "LeftShift", "RightShift", "IF", "FI", 
                  "ELSE", "FOR", "TO", "TO2", "ENDFOR", "DO", "WHILE", "OD", 
                  "CASE", "ESAC", "OF", "DEFINE", "RETURN", "NAME", "IdentifierNondigit", 
                  "Nondigit", "Digit", "UniversalCharacterName", "HexQuad", 
                  "BinaryConstant", "OctalConstant", "HexadecimalConstant", 
                  "HexadecimalPrefix", "OctalDigit", "HexadecimalDigit", 
                  "INT", "LineComment", "WS" ]

    grammarFileName = "intel_operation_language.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


